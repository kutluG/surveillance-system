name: E2E Tests

on:
  push:
    branches: [main]
    paths:
      - 'annotation_frontend/**'
      - '.github/workflows/e2e-tests.yml'
  pull_request:
    branches: [main]
    paths:
      - 'annotation_frontend/**'
      - '.github/workflows/e2e-tests.yml'
  workflow_dispatch:
    inputs:
      browser:
        description: 'Browser to test with'
        required: false
        default: 'chromium'
        type: choice
        options:
          - chromium
          - firefox
          - webkit
          - all
      headed:
        description: 'Run tests in headed mode'
        required: false
        default: false
        type: boolean

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: events_db
          POSTGRES_USER: surveillance_user
          POSTGRES_PASSWORD: surveillance_pass_5487
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      zookeeper:
        image: confluentinc/cp-zookeeper:7.4.0
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000
        ports:
          - 2181:2181
      
      kafka:
        image: confluentinc/cp-kafka:7.4.0
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
          KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
        ports:
          - 9092:9092
        depends_on:
          - zookeeper
    
    strategy:
      fail-fast: false
      matrix:
        browser: ${{ github.event.inputs.browser == 'all' && fromJSON('["chromium", "firefox", "webkit"]') || fromJSON(format('["{0}"]', github.event.inputs.browser || 'chromium')) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: annotation_frontend/package-lock.json
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r annotation_frontend/requirements.txt
      
      - name: Install Node.js dependencies
        working-directory: annotation_frontend
        run: npm ci
      
      - name: Install Playwright browsers
        working-directory: annotation_frontend
        run: |
          if [ "${{ matrix.browser }}" = "all" ]; then
            npx playwright install --with-deps
          else
            npx playwright install --with-deps ${{ matrix.browser }}
          fi
      
      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to be ready..."
          
          # Wait for PostgreSQL
          echo "Waiting for PostgreSQL..."
          timeout 60s bash -c 'until printf "" 2>>/dev/null >>/dev/tcp/localhost/5432; do sleep 1; done'
          echo "PostgreSQL is ready"
          
          # Wait for Redis
          echo "Waiting for Redis..."
          timeout 60s bash -c 'until printf "" 2>>/dev/null >>/dev/tcp/localhost/6379; do sleep 1; done'
          echo "Redis is ready"
          
          # Wait for Zookeeper
          echo "Waiting for Zookeeper..."
          timeout 60s bash -c 'until printf "" 2>>/dev/null >>/dev/tcp/localhost/2181; do sleep 1; done'
          echo "Zookeeper is ready"
          
          # Wait for Kafka
          echo "Waiting for Kafka..."
          timeout 120s bash -c 'until printf "" 2>>/dev/null >>/dev/tcp/localhost/9092; do sleep 2; done'
          echo "Kafka is ready"
          
          # Additional wait to ensure Kafka is fully initialized
          sleep 10
      
      - name: Set up database schema
        run: |
          echo "Setting up database schema..."
          python -c "
          import sys
          sys.path.append('annotation_frontend')
          try:
              from database import create_tables
              create_tables()
              print('Database tables created successfully')
          except Exception as e:
              print(f'Database setup error: {e}')
              # Continue anyway as tables might already exist
          "
        env:
          DATABASE_URL: postgresql://surveillance_user:surveillance_pass_5487@localhost:5432/events_db
      
      - name: Create test data
        run: |
          echo "Creating test data..."
          python -c "
          import sys
          sys.path.append('annotation_frontend')
          try:
              from database import init_test_data
              init_test_data()
              print('Test data created successfully')
          except Exception as e:
              print(f'Test data creation: {e}')
              # Continue anyway
          "
        env:
          DATABASE_URL: postgresql://surveillance_user:surveillance_pass_5487@localhost:5432/events_db
      
      - name: Run Playwright E2E tests
        working-directory: annotation_frontend
        run: |
          if [ "${{ github.event.inputs.headed }}" = "true" ]; then
            npx playwright test --project=${{ matrix.browser }} --headed
          else
            npx playwright test --project=${{ matrix.browser }}
          fi
        env:
          CI: true
          DATABASE_URL: postgresql://surveillance_user:surveillance_pass_5487@localhost:5432/events_db
          REDIS_URL: redis://localhost:6379
          KAFKA_BOOTSTRAP_SERVERS: localhost:9092
          PORT: 8001
          ENV: test
          PLAYWRIGHT_HTML_REPORT: playwright-report-${{ matrix.browser }}
      
      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: annotation_frontend/playwright-report-${{ matrix.browser }}/
          retention-days: 30
      
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.browser }}
          path: annotation_frontend/test-results/
          retention-days: 30
      
      - name: Upload Screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots-${{ matrix.browser }}
          path: annotation_frontend/test-results/screenshots/
          retention-days: 7
      
      - name: Upload Videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: videos-${{ matrix.browser }}
          path: annotation_frontend/test-results/videos/
          retention-days: 7

  test-summary:
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: test-results
      
      - name: Generate test summary
        run: |
          echo "# E2E Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "test-results" ]; then
            echo "## Artifacts Generated:" >> $GITHUB_STEP_SUMMARY
            find test-results -name "*.xml" -o -name "*.json" -o -name "*.html" | while read file; do
              echo "- $file" >> $GITHUB_STEP_SUMMARY
            done
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the Actions tab for detailed test reports and artifacts." >> $GITHUB_STEP_SUMMARY
