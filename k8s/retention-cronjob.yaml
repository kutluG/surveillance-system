apiVersion: batch/v1
kind: CronJob
metadata:
  name: retention-cronjob
  namespace: surveillance-system
  labels:
    app: retention-service
    component: data-cleanup
spec:
  # Run daily at 02:00 AM server time
  schedule: "0 2 * * *"
  timeZone: "UTC"
  concurrencyPolicy: Forbid  # Don't run multiple instances
  failedJobsHistoryLimit: 3
  successfulJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: retention-service
            component: data-cleanup
        spec:
          restartPolicy: OnFailure
          containers:
          - name: retention-job
            image: surveillance-system/retention-service:latest
            imagePullPolicy: IfNotPresent
            command: ["python", "-m", "retention_service.main", "--run-once"]
            env:
            - name: DB_URL
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: database-url
            - name: STORAGE_PATH
              valueFrom:
                configMapKeyRef:
                  name: storage-config
                  key: storage-path
            - name: RETENTION_DAYS
              valueFrom:
                configMapKeyRef:
                  name: retention-config
                  key: retention-days
                  optional: true
            # S3 credentials (if using S3 storage)
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: s3-secrets
                  key: access-key-id
                  optional: true
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: s3-secrets
                  key: secret-access-key
                  optional: true
            - name: AWS_REGION
              valueFrom:
                configMapKeyRef:
                  name: storage-config
                  key: aws-region
                  optional: true
            # Logging configuration
            - name: SERVICE_NAME
              value: "retention_service"
            - name: LOG_LEVEL
              value: "INFO"
            resources:
              requests:
                memory: "256Mi"
                cpu: "100m"
              limits:
                memory: "512Mi"
                cpu: "500m"
            volumeMounts:
            # Mount local storage if using local filesystem
            - name: video-storage
              mountPath: /data/clips
              readOnly: false
          volumes:
          - name: video-storage
            persistentVolumeClaim:
              claimName: video-storage-pvc
          # Service account for accessing secrets
          serviceAccountName: retention-service-sa

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: retention-config
  namespace: surveillance-system
data:
  retention-days: "30"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: storage-config
  namespace: surveillance-system
data:
  storage-path: "/data/clips"
  # For S3 storage, use: "s3://your-bucket-name"
  aws-region: "us-east-1"

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: retention-service-sa
  namespace: surveillance-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: retention-service-role
  namespace: surveillance-system
rules:
- apiGroups: [""]
  resources: ["secrets", "configmaps"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: retention-service-binding
  namespace: surveillance-system
subjects:
- kind: ServiceAccount
  name: retention-service-sa
  namespace: surveillance-system
roleRef:
  kind: Role
  name: retention-service-role
  apiGroup: rbac.authorization.k8s.io
