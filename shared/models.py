"""
Pydantic models and enums shared across all services for the Agent-Based
Intelligent Camera Surveillance System.
"""
from __future__ import annotations
from enum import Enum
from typing import Any, Dict, List, Optional
from uuid import UUID, uuid4
from datetime import datetime

from pydantic import BaseModel, Field, HttpUrl


class EventType(str, Enum):
    """
    The type of camera-generated event.
    """
    DETECTION = "detection"
    ACTIVITY = "activity"


class SeverityLevel(str, Enum):
    """
    Severity level for alerts and notifications.
    """
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"


class BoundingBox(BaseModel):
    """
    Normalized bounding box coordinates in [0.0, 1.0], or pixel values.
    Coordinates are (x_min, y_min, x_max, y_max).
    """
    x_min: float = Field(..., ge=0.0, le=1.0, description="Left coordinate")
    y_min: float = Field(..., ge=0.0, le=1.0, description="Top coordinate")
    x_max: float = Field(..., ge=0.0, le=1.0, description="Right coordinate")
    y_max: float = Field(..., ge=0.0, le=1.0, description="Bottom coordinate")


class Detection(BaseModel):
    """
    Single object/person detection output from the edge model.
    """
    label: str = Field(..., description="Detected class label")
    confidence: float = Field(..., ge=0.0, le=1.0, description="Confidence score")
    bounding_box: BoundingBox = Field(..., description="Location of detected object")


class CameraEvent(BaseModel):
    """
    Representation of an event generated by the edge service.
    """
    id: UUID = Field(default_factory=uuid4, description="Unique event identifier")
    timestamp: datetime = Field(default_factory=datetime.utcnow, description="Event capture time in UTC")
    camera_id: str = Field(..., description="Unique identifier for the camera")
    event_type: EventType = Field(..., description="Type of the event")
    detections: Optional[List[Detection]] = Field(None, description="List of object detections")
    activity: Optional[str] = Field(None, description="Recognized activity label")
    metadata: Optional[Dict[str, Any]] = Field(None, description="Extra event-specific data")


class Alert(BaseModel):
    """
    Human-readable alert generated by the RAG service.
    """
    id: UUID = Field(default_factory=uuid4, description="Unique alert identifier")
    timestamp: datetime = Field(default_factory=datetime.utcnow, description="Alert creation time in UTC")
    alert_text: str = Field(..., description="Generated alert message")
    severity: SeverityLevel = Field(..., description="Severity of the alert")
    evidence_ids: List[UUID] = Field(..., description="List of event IDs used as evidence")


class NotificationRequest(BaseModel):
    """
    Payload for the notification microservice.
    """
    id: UUID = Field(default_factory=uuid4, description="Unique notification request ID")
    alert: Alert = Field(..., description="Alert details to dispatch")
    channels: List[str] = Field(..., description="Channels to send (email, sms, slack, webhook, etc.)")
    recipients: List[str] = Field(..., description="Destination addresses or identifiers")


class PolicyRule(BaseModel):
    """
    JSON schema for a policy rule generated by the Rule-Generator Agent.
    """
    id: UUID = Field(default_factory=uuid4, description="Unique rule identifier")
    name: str = Field(..., description="Short human-readable name for the rule")
    description: Optional[str] = Field(None, description="Detailed description of the policy")
    rule: Dict[str, Any] = Field(..., description="Machine-consumable JSON rule structure")


class QueryResult(BaseModel):
    """
    Result payload for the Prompt API natural-language queries.
    """
    answer_text: str = Field(..., description="Human-readable answer to the query")
    clip_links: List[HttpUrl] = Field(..., description="URLs to relevant video clips")