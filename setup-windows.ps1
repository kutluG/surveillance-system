# Surveillance System - Windows Kurulum Scripti
# Bu script surveillance system projesini Windows ortamında kurar ve yapılandırır

param(
    [switch]$SkipPrerequisites,
    [switch]$DevMode,
    [switch]$Quick,
    [switch]$BuildOnly,
    [string]$Environment = "development"
)

# Renkli çıktı için fonksiyonlar
function Write-ColorOutput($ForegroundColor) {
    if ($Host.UI.RawUI.ForegroundColor) {
        $fc = $Host.UI.RawUI.ForegroundColor
        $Host.UI.RawUI.ForegroundColor = $ForegroundColor
        if ($args) {
            Write-Output $args
        } else {
            $input | Write-Output
        }
        $Host.UI.RawUI.ForegroundColor = $fc
    } else {
        if ($args) {
            Write-Output $args
        } else {
            $input | Write-Output
        }
    }
}

function Write-Success { Write-ColorOutput Green $args }
function Write-Warning { Write-ColorOutput Yellow $args }
function Write-Error { Write-ColorOutput Red $args }
function Write-Info { Write-ColorOutput Cyan $args }

# Ana başlık
Write-Host @"
🚀 Surveillance System - Windows Kurulum Scripti
================================================
Ortam: $Environment
"@ -ForegroundColor Magenta

# Hata yönetimi
$ErrorActionPreference = "Stop"
trap {
    Write-Error "❌ Hata oluştu: $_"
    Read-Host "Devam etmek için Enter'a basın"
    exit 1
}

# Gerekli ön koşulları kontrol et
function Test-Prerequisites {
    if ($SkipPrerequisites) {
        Write-Warning "⚠️  Ön koşul kontrolleri atlanıyor..."
        return
    }

    Write-Info "📋 Ön koşullar kontrol ediliyor..."
    
    # Docker kontrolü
    try {
        $dockerVersion = docker --version
        Write-Success "✅ Docker bulundu: $dockerVersion"
    }
    catch {
        Write-Error "❌ Docker bulunamadı. Lütfen Docker Desktop'ı kurun: https://www.docker.com/products/docker-desktop"
        exit 1
    }

    # Docker Compose kontrolü
    try {
        $composeVersion = docker-compose --version
        Write-Success "✅ Docker Compose bulundu: $composeVersion"
    }
    catch {
        Write-Error "❌ Docker Compose bulunamadı. Docker Desktop ile birlikte gelmelidir."
        exit 1
    }

    # Python kontrolü
    try {
        $pythonVersion = python --version
        Write-Success "✅ Python bulundu: $pythonVersion"
    }
    catch {
        Write-Warning "⚠️  Python bulunamadı. Bazı geliştirme araçları çalışmayabilir."
    }

    # Git kontrolü
    try {
        $gitVersion = git --version
        Write-Success "✅ Git bulundu: $gitVersion"
    }
    catch {
        Write-Warning "⚠️  Git bulunamadı. Versiyon kontrolü için Git kurmanız önerilir."
    }

    # Docker'ın çalışır durumda olduğunu kontrol et
    try {
        docker ps | Out-Null
        Write-Success "✅ Docker servisi çalışıyor"
    }
    catch {
        Write-Error "❌ Docker servisi çalışmıyor. Lütfen Docker Desktop'ı başlatın."
        exit 1
    }
}

# Ortam değişkenlerini ayarla
function Set-EnvironmentVariables {
    Write-Info "🔧 Ortam değişkenleri ayarlanıyor..."
    
    # .env dosyası oluştur
    $envContent = @"
# Surveillance System Environment Configuration
# Generated by setup script on $(Get-Date)

# Environment
ENVIRONMENT=$Environment

# Database Configuration
POSTGRES_DB=events_db
POSTGRES_USER=surveillance_user
POSTGRES_PASSWORD=surveillance_pass_$(Get-Random -Minimum 1000 -Maximum 9999)
DATABASE_URL=postgresql://surveillance_user:surveillance_pass_$(Get-Random -Minimum 1000 -Maximum 9999)@postgres:5432/events_db

# Redis Configuration
REDIS_URL=redis://redis:6379/0

# Kafka Configuration
KAFKA_BOOTSTRAP_SERVERS=kafka:9092
KAFKA_TOPIC_PREFIX=surveillance

# API Configuration
API_HOST=0.0.0.0
API_PORT=8000
JWT_SECRET_KEY=surveillance_jwt_secret_$(Get-Random -Minimum 10000 -Maximum 99999)

# AI Service Configuration
OPENAI_API_KEY=your_openai_api_key_here
WEAVIATE_URL=http://weaviate:8080

# Monitoring
PROMETHEUS_PORT=9090
GRAFANA_PORT=3000
GRAFANA_ADMIN_PASSWORD=admin123

# Video Storage
VIDEO_STORAGE_PATH=./data/clips
MAX_CLIP_SIZE_MB=100

# MQTT Configuration
MQTT_BROKER_HOST=localhost
MQTT_BROKER_PORT=1883
MQTT_USERNAME=surveillance
MQTT_PASSWORD=mqtt_pass_$(Get-Random -Minimum 1000 -Maximum 9999)

# Development Settings
DEBUG=true
LOG_LEVEL=INFO
"@

    $envContent | Out-File -FilePath ".env" -Encoding UTF8
    Write-Success "✅ .env dosyası oluşturuldu"
}

# Gerekli dizinleri oluştur
function New-RequiredDirectories {
    Write-Info "📁 Gerekli dizinler oluşturuluyor..."
    
    $directories = @(
        "data",
        "data/clips",
        "data/postgres",
        "data/redis",
        "logs",
        "certs",
        "monitoring/grafana/data",
        "monitoring/prometheus/data"
    )
    
    foreach ($dir in $directories) {
        if (!(Test-Path $dir)) {
            New-Item -ItemType Directory -Path $dir -Force | Out-Null
            Write-Success "✅ Dizin oluşturuldu: $dir"
        }
    }
}

# Docker volumelerini oluştur
function New-DockerVolumes {
    Write-Info "💾 Docker volumeleri oluşturuluyor..."
    
    $volumes = @(
        "surveillance_postgres_data",
        "surveillance_redis_data",
        "surveillance_kafka_data",
        "surveillance_weaviate_data",
        "surveillance_grafana_data",
        "surveillance_prometheus_data"
    )
    
    foreach ($volume in $volumes) {
        try {
            docker volume create $volume | Out-Null
            Write-Success "✅ Volume oluşturuldu: $volume"
        }
        catch {
            Write-Warning "⚠️  Volume zaten mevcut veya oluşturulamadı: $volume"
        }
    }
}

# Docker networklerini oluştur
function New-DockerNetworks {
    Write-Info "🌐 Docker networkleri oluşturuluyor..."
    
    $networks = @(
        "surveillance_network",
        "surveillance_monitoring"
    )
    
    foreach ($network in $networks) {
        try {
            docker network create $network | Out-Null
            Write-Success "✅ Network oluşturuldu: $network"
        }
        catch {
            Write-Warning "⚠️  Network zaten mevcut veya oluşturulamadı: $network"
        }
    }
}

# Docker imajlarını build et
function Build-DockerImages {
    Write-Info "🐳 Docker imajları build ediliyor..."
    
    $services = @(
        "api_gateway",
        "edge_service", 
        "vms_service",
        "ingest_service",
        "prompt_service",
        "enhanced_prompt_service",
        "rag_service",
        "advanced_rag_service",
        "rule_builder_service",
        "rulegen_service",
        "notifier",
        "mqtt_kafka_bridge",
        "websocket_service",
        "voice_interface_service",
        "ai_dashboard_service",
        "agent_orchestrator"
    )
    
    foreach ($service in $services) {
        if (Test-Path "$service/Dockerfile") {
            Write-Info "🏗️  Building $service..."
            try {
                docker build -t "surveillance-$service" -f "$service/Dockerfile" .
                Write-Success "✅ $service build edildi"
            }
            catch {
                Write-Warning "⚠️  $service build edilemedi: $_"
            }
        }
    }
}

# Servisleri başlat
function Start-Services {
    Write-Info "🚀 Servisler başlatılıyor..."
    
    if ($Quick) {
        Write-Info "⚡ Hızlı başlatma modu - sadece temel servisler"
        docker-compose up -d postgres redis kafka zookeeper api_gateway
    }
    elseif ($DevMode) {
        Write-Info "🛠️  Geliştirme modu - monitoring servisleri dahil"
        docker-compose --profile development up -d
    }
    else {
        Write-Info "🌟 Tüm servisler başlatılıyor..."
        docker-compose up -d
    }
    
    Write-Success "✅ Servisler başlatıldı"
}

# Health check
function Test-ServiceHealth {
    Write-Info "🏥 Servis sağlığı kontrol ediliyor..."
    
    Start-Sleep -Seconds 10
    
    $services = @(
        @{Name="API Gateway"; Url="http://localhost:8000/health"},
        @{Name="Postgres"; Command="docker exec surveillance-postgres pg_isready -U surveillance_user"},
        @{Name="Redis"; Command="docker exec surveillance-redis redis-cli ping"}
    )
    
    foreach ($service in $services) {
        if ($service.Url) {
            try {
                $response = Invoke-WebRequest -Uri $service.Url -TimeoutSec 5
                if ($response.StatusCode -eq 200) {
                    Write-Success "✅ $($service.Name) sağlıklı"
                }
            }
            catch {
                Write-Warning "⚠️  $($service.Name) henüz hazır değil"
            }
        }
        elseif ($service.Command) {
            try {
                Invoke-Expression $service.Command | Out-Null
                Write-Success "✅ $($service.Name) sağlıklı"
            }
            catch {
                Write-Warning "⚠️  $($service.Name) henüz hazır değil"
            }
        }
    }
}

# Geliştirme araçlarını kur
function Install-DevelopmentTools {
    if (!$DevMode) {
        return
    }
    
    Write-Info "🛠️  Geliştirme araçları kuruluyor..."
    
    # Python sanal ortamı oluştur
    if (Get-Command python -ErrorAction SilentlyContinue) {
        try {
            python -m venv venv
            Write-Success "✅ Python sanal ortamı oluşturuldu"
            
            # Sanal ortamı aktif et ve gereksinimleri kur
            & .\venv\Scripts\Activate.ps1
            
            if (Test-Path "requirements.txt") {
                pip install -r requirements.txt
                Write-Success "✅ Python gereksinimleri kuruldu"
            }
            
            # Geliştirme gereksinimleri
            pip install pytest black flake8 mypy pre-commit
            Write-Success "✅ Geliştirme araçları kuruldu"
            
        }
        catch {
            Write-Warning "⚠️  Python geliştirme araçları kurulamadı: $_"
        }
    }
}

# Ana kurulum fonksiyonu
function Install-SurveillanceSystem {
    Write-Host "🎯 Kurulum başlıyor..." -ForegroundColor Green
    
    # Ön koşulları kontrol et
    Test-Prerequisites
    
    # Ortam değişkenlerini ayarla
    Set-EnvironmentVariables
    
    # Gerekli dizinleri oluştur
    New-RequiredDirectories
    
    # Docker kaynaklarını oluştur
    New-DockerVolumes
    New-DockerNetworks
    
    if (!$BuildOnly) {
        # İmajları build et
        Build-DockerImages
        
        # Servisleri başlat
        Start-Services
        
        # Sağlık kontrolü
        Test-ServiceHealth
        
        # Geliştirme araçlarını kur
        Install-DevelopmentTools
    }
    else {
        Build-DockerImages
    }
    
    Write-Host @"

🎉 Kurulum tamamlandı!
===================

Servis URL'leri:
• API Gateway: http://localhost:8000
• Grafana Monitoring: http://localhost:3000 (admin/admin123)
• Prometheus: http://localhost:9090

Kullanışlı komutlar:
• Servisleri durdur: docker-compose down
• Servisleri yeniden başlat: docker-compose restart
• Logları görüntüle: docker-compose logs -f
• Durumu kontrol et: .\check-status.ps1

Geliştirme:
• Python sanal ortamı: .\venv\Scripts\Activate.ps1
• Testleri çalıştır: pytest
• Kodu formatla: black .

Daha fazla bilgi için README.md dosyasını inceleyin.
"@ -ForegroundColor Green
}

# Cleanup fonksiyonu
function Remove-SurveillanceSystem {
    Write-Warning "🧹 Sistem temizleniyor..."
    
    # Servisleri durdur
    docker-compose down -v
    
    # İmajları sil
    docker images -q surveillance-* | ForEach-Object { docker rmi $_ -f }
    
    # Volumeleri sil
    docker volume ls -q | Where-Object { $_ -like "surveillance_*" } | ForEach-Object { docker volume rm $_ }
    
    # Networkleri sil
    docker network ls -q | Where-Object { $_ -like "surveillance_*" } | ForEach-Object { docker network rm $_ }
    
    Write-Success "✅ Temizlik tamamlandı"
}

# Ana script logic
if ($args -contains "clean") {
    Remove-SurveillanceSystem
}
else {
    Install-SurveillanceSystem
}

Write-Host "`n🚀 Script tamamlandı!" -ForegroundColor Magenta
