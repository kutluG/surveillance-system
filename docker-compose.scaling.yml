# Docker Compose Scaling Configuration for Annotation Frontend Service
#
# This file demonstrates how to scale the annotation_frontend service to multiple replicas
# for load-balanced Kafka consumer groups.

version: '3.8'

services:
  # Core infrastructure services (same as main docker-compose.yml)
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: events_db
      POSTGRES_USER: surveillance_user
      POSTGRES_PASSWORD: surveillance_pass_5487
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U surveillance_user -d events_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      # Ensure topics have multiple partitions for load balancing
      KAFKA_CREATE_TOPICS: "hard.examples:3:1,labeled.examples:3:1"
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Annotation Frontend Service - Configured for Scaling
  annotation_frontend:
    build:
      context: .
      dockerfile: annotation_frontend/Dockerfile
    environment:
      - SERVICE_NAME=annotation_frontend
      - LOG_LEVEL=INFO
      
      # Kafka Consumer Group Configuration for Load Balancing
      - KAFKA_GROUP_ID=annotation-frontend-group
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - HARD_EXAMPLES_TOPIC=hard.examples
      - LABELED_EXAMPLES_TOPIC=labeled.examples
      
      # Redis Configuration for Stateless Operation
      - REDIS_URL=redis://redis:6379
      - REDIS_DB=0
      - RETRY_QUEUE_KEY=annotation:retry_queue
      
      # Database Configuration
      - DATABASE_URL=postgresql://surveillance_user:surveillance_pass_5487@postgres:5432/events_db
      
      # Rate Limiting Configuration  
      - RATE_LIMIT_DEFAULT=100/minute
      - RATE_LIMIT_CONTACT=10/minute
      - RATE_LIMIT_ALERTS=50/minute
      - RATE_LIMIT_ENABLED=true
      
      # Security Configuration
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-change-me-in-production}
      - CSRF_SECRET_KEY=${CSRF_SECRET_KEY:-csrf-secret-change-me}
      
    depends_on:
      - kafka
      - redis  
      - postgres
      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/readyz"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
      
    # Load balancer will handle port distribution
    # Don't expose ports directly when scaling - use a load balancer
    # ports:
    #   - "8011:8000"
    
    # Scaling configuration
    deploy:
      mode: replicated
      replicas: 3  # Scale to 3 instances by default
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Load Balancer for Scaled Annotation Frontend Instances
  nginx_load_balancer:
    image: nginx:alpine
    ports:
      - "8011:80"
    volumes:
      - ./nginx_scaling.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - annotation_frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:

# =============================================================================
# SCALING COMMANDS
# =============================================================================
#
# To scale the annotation_frontend service:
#
# Scale to 3 instances:
# docker-compose -f docker-compose.scaling.yml up --scale annotation_frontend=3
#
# Scale to 5 instances:  
# docker-compose -f docker-compose.scaling.yml up --scale annotation_frontend=5
#
# Scale down to 1 instance:
# docker-compose -f docker-compose.scaling.yml up --scale annotation_frontend=1
#
# Check running instances:
# docker-compose -f docker-compose.scaling.yml ps
#
# View logs from all instances:
# docker-compose -f docker-compose.scaling.yml logs annotation_frontend
#
# View Kafka consumer group information:
# docker exec $(docker-compose -f docker-compose.scaling.yml ps -q kafka) \
#   kafka-consumer-groups.sh \
#   --bootstrap-server localhost:9092 \
#   --group annotation-frontend-group \
#   --describe
#
# =============================================================================
# MONITORING SCALED INSTANCES
# =============================================================================
#
# Check health of all instances:
# curl http://localhost:8011/readyz
# 
# Check Kafka partition assignments:
# curl http://localhost:8011/api/v1/kafka/metrics
#
# Check Redis connection counts across instances:
# docker exec $(docker-compose -f docker-compose.scaling.yml ps -q redis) \
#   redis-cli GET websocket_connections
#
# =============================================================================
