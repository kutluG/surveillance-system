name: Enhanced Prompt Service CI

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'enhanced_prompt_service/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'enhanced_prompt_service/**'

env:
  PYTHON_VERSION: '3.11'
  SERVICE_PATH: enhanced_prompt_service

jobs:
  dependency-validation:
    name: 🔍 Dependency Validation
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.SERVICE_PATH }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 🔍 Validate pinned dependencies
        run: |
          echo "Checking that all dependencies are properly pinned..."
          python scripts/validate_requirements.py
      
      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: 🔐 Audit dependencies for vulnerabilities
        run: |
          echo "Running security audit on installed dependencies..."
          python scripts/audit_dependencies.py
      
      - name: 📊 Generate dependency report
        if: always()
        run: |
          echo "=== Installed Packages ===" > dependency-report.txt
          pip list >> dependency-report.txt
          echo "" >> dependency-report.txt
          echo "=== Dependency Tree ===" >> dependency-report.txt
          pip install pipdeptree
          pipdeptree >> dependency-report.txt
      
      - name: 📤 Upload dependency report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-report
          path: ${{ env.SERVICE_PATH }}/dependency-report.txt
          retention-days: 30

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: dependency-validation
    defaults:
      run:
        working-directory: ${{ env.SERVICE_PATH }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: 🔍 Run Bandit security scan
        run: |
          pip install bandit[toml]
          bandit -r . -f json -o bandit-report.json || true
      
      - name: 🔍 Run Safety security scan
        run: |
          pip install safety
          safety check --json --output safety-report.json || true
      
      - name: 📤 Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            ${{ env.SERVICE_PATH }}/bandit-report.json
            ${{ env.SERVICE_PATH }}/safety-report.json
          retention-days: 30

  documentation-validation:
    name: 📚 Documentation Validation
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.SERVICE_PATH }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: 📦 Install markdown-link-check
        run: npm install -g markdown-link-check
      
      - name: 🔍 Check README links
        run: |
          markdown-link-check README.md --quiet || echo "README link check failed"
      
      - name: 🔍 Check documentation links
        run: |
          find docs -name "*.md" -print0 | xargs -0 -I {} \
          markdown-link-check {} --quiet || echo "Documentation link check failed"
      
      - name: ✅ Validate OpenAPI spec exists
        run: |
          if [ ! -f "docs/enhanced_prompt_openapi.json" ]; then
            echo "❌ OpenAPI specification file not found"
            exit 1
          fi
          echo "✅ OpenAPI specification file exists"
      
      - name: 🔍 Validate OpenAPI spec format
        run: |
          python -c "
          import json
          try:
              with open('docs/enhanced_prompt_openapi.json', 'r') as f:
                  spec = json.load(f)
              assert 'openapi' in spec, 'Missing openapi version'
              assert 'info' in spec, 'Missing info section'
              assert 'paths' in spec, 'Missing paths section'
              print('✅ OpenAPI specification is valid JSON with required fields')
          except Exception as e:
              print(f'❌ OpenAPI specification validation failed: {e}')
              exit(1)
          "
  test:
    name: 🧪 Test
    runs-on: ubuntu-latest
    needs: [dependency-validation, documentation-validation]
    defaults:
      run:
        working-directory: ${{ env.SERVICE_PATH }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov pytest-mock httpx fakeredis
      
      - name: 🧪 Run Python Tests
        run: |
          pytest --maxfail=1 --disable-warnings -q
      
      - name: 🧪 Run tests with coverage
        run: |
          python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing --cov-report=html
      
      - name: 🧪 Run integration tests
        run: |
          python -m pytest tests/test_clip_store.py -v -k "integration" --disable-warnings
      
      - name: 🧪 Run E2E API tests
        run: |
          python -m pytest tests/test_api_endpoints.py -v --disable-warnings
      
      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ${{ env.SERVICE_PATH }}/coverage.xml
          flags: enhanced-prompt-service
          name: enhanced-prompt-service
      
      - name: 📤 Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            ${{ env.SERVICE_PATH }}/coverage.xml
            ${{ env.SERVICE_PATH }}/htmlcov/
          retention-days: 30
      
      - name: 📤 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ${{ env.SERVICE_PATH }}/pytest-results.xml
          retention-days: 30
