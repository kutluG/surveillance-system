version: '3.8'

# Surveillance System Docker Compose Configuration
# This file orchestrates all microservices and infrastructure components

services:
  # =============================================================================
  # INFRASTRUCTURE SERVICES
  # =============================================================================
  
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: events_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d events_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5

  weaviate:
    image: semitechnologies/weaviate:1.23.7
    ports:
      - "8080:8080"
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      ENABLE_MODULES: 'text2vec-openai'
      CLUSTER_HOSTNAME: 'node1'
    volumes:
      - weaviate_data:/var/lib/weaviate
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 5

  # =============================================================================
  # MONITORING INFRASTRUCTURE
  # =============================================================================
  
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
  # =============================================================================
  # API GATEWAY
  # =============================================================================

  api_gateway:
    build:
      context: .
      dockerfile: api_gateway/Dockerfile
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      - enhanced_prompt_service
      - websocket_service
      - agent_orchestrator
      - rule_builder_service
      - advanced_rag_service
      - ai_dashboard_service
      - voice_interface_service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # =============================================================================
  # APPLICATION SERVICES
  # =============================================================================

  edge_service:
    build:
      context: .
      dockerfile: edge_service/Dockerfile
    env_file:
      - .env
    ports:
      - "8001:8000"
    volumes:
      - ./models:/models:ro
      - ./certs:/certs:ro
      - /dev/video0:/dev/video0  # Camera access (Linux)
    depends_on:
      - kafka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  mqtt_kafka_bridge:
    build:
      context: .
      dockerfile: mqtt_kafka_bridge/Dockerfile
    env_file:
      - .env
    ports:
      - "8002:8000"
    volumes:
      - ./certs:/certs:ro
    depends_on:
      - kafka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  ingest_service:
    build:
      context: .
      dockerfile: ingest_service/Dockerfile
    env_file:
      - .env
    ports:
      - "8003:8000"
    depends_on:
      - postgres
      - kafka
      - weaviate
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  rag_service:
    build:
      context: .
      dockerfile: rag_service/Dockerfile
    env_file:
      - .env
    ports:
      - "8004:8000"
    depends_on:
      - weaviate
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  prompt_service:
    build:
      context: .
      dockerfile: prompt_service/Dockerfile
    env_file:
      - .env
    ports:
      - "8005:8000"
    depends_on:
      - weaviate
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  rulegen_service:
    build:
      context: .
      dockerfile: rulegen_service/Dockerfile
    env_file:
      - .env
    ports:
      - "8006:8000"
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  notifier:
    build:
      context: .
      dockerfile: notifier/Dockerfile
    env_file:
      - .env
    ports:
      - "8007:8000"
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
  vms_service:
    build:
      context: .
      dockerfile: vms_service/Dockerfile
    env_file:
      - .env
    ports:
      - "8008:8000"
    volumes:
      - ./data/clips:/data/clips
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # =============================================================================
  # ENHANCED AI SERVICES
  # =============================================================================

  enhanced_prompt_service:
    build:
      context: .
      dockerfile: enhanced_prompt_service/Dockerfile
    env_file:
      - .env
    ports:
      - "8009:8000"
    depends_on:
      - redis
      - weaviate
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  websocket_service:
    build:
      context: .
      dockerfile: websocket_service/Dockerfile
    env_file:
      - .env
    ports:
      - "8010:8000"
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  agent_orchestrator:
    build:
      context: .
      dockerfile: agent_orchestrator/Dockerfile
    env_file:
      - .env
    ports:
      - "8011:8000"
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  rule_builder_service:
    build:
      context: .
      dockerfile: rule_builder_service/Dockerfile
    env_file:
      - .env
    ports:
      - "8012:8000"
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  advanced_rag_service:
    build:
      context: .
      dockerfile: advanced_rag_service/Dockerfile
    env_file:
      - .env
    ports:
      - "8013:8000"
    depends_on:
      - weaviate
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  ai_dashboard_service:
    build:
      context: .
      dockerfile: ai_dashboard_service/Dockerfile
    env_file:
      - .env
    ports:
      - "8014:8000"  
    depends_on:
      - postgres
      - weaviate
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  voice_interface_service:
    build:
      context: .
      dockerfile: voice_interface_service/Dockerfile
    env_file:
      - .env
    ports:
      - "8015:8000"
    depends_on:
      - websocket_service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

# =============================================================================
# VOLUMES
# =============================================================================

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  weaviate_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================

networks:
  default:
    name: surveillance_network
    driver: bridge
