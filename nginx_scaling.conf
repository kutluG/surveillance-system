# Nginx Load Balancer Configuration for Scaled Annotation Frontend Services
#
# This configuration provides load balancing across multiple annotation_frontend instances
# with health checks and proper WebSocket support.

events {
    worker_connections 1024;
}

http {
    # Upstream configuration for annotation frontend instances
    upstream annotation_frontend_backend {
        # Docker Compose automatically creates these service names
        # when scaling with --scale annotation_frontend=N
        server annotation_frontend:8000 max_fails=3 fail_timeout=30s;
        
        # Additional instances will be available at:
        # annotation_frontend_2:8000, annotation_frontend_3:8000, etc.
        # But Docker Compose handles this automatically via DNS
        
        # Health check parameters
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }
    
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=health:10m rate=30r/s;
    
    # Connection limiting for WebSocket
    limit_conn_zone $binary_remote_addr zone=websocket:10m;
    
    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'upstream_addr="$upstream_addr" '
                    'upstream_response_time="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Main server configuration
    server {
        listen 80;
        server_name localhost;
        
        # Health check endpoint for load balancer itself
        location /nginx_health {
            access_log off;
            return 200 "nginx ok\n";
            add_header Content-Type text/plain;
        }
        
        # Health and readiness probes - with rate limiting
        location ~ ^/(health|healthz|readyz)$ {
            limit_req zone=health burst=10 nodelay;
            
            proxy_pass http://annotation_frontend_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Health check timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            # No caching for health checks
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }
        
        # WebSocket connections for real-time updates
        location /ws/ {
            limit_conn websocket 100;  # Max 100 WebSocket connections per IP
            
            proxy_pass http://annotation_frontend_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket specific timeouts
            proxy_connect_timeout 10s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            
            # Disable buffering for real-time communication
            proxy_buffering off;
            proxy_cache off;
        }
        
        # API endpoints with rate limiting
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://annotation_frontend_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # API timeouts
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Request size limits
            client_max_body_size 10M;
        }
        
        # Static files with caching
        location /static/ {
            proxy_pass http://annotation_frontend_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Cache static assets
            proxy_cache_valid 200 1d;
            proxy_cache_valid 404 1m;
            expires 1d;
            add_header Cache-Control "public, immutable";
        }
        
        # All other requests
        location / {
            proxy_pass http://annotation_frontend_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Standard timeouts
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        
        # Error pages
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
    
    # Upstream health checking (requires nginx-plus or custom module)
    # For basic nginx, health is checked via application endpoints
    
    # Optional: Metrics endpoint for monitoring
    server {
        listen 8080;
        server_name localhost;
        
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }
    }
}
