# AI-Powered Surveillance System

A comprehensive microservices-based surveillance system powered by artificial intelligence for real-time video analysis, object detection, and intelligent alerting.

## 🎯 Overview

This system provides a complete surveillance solution with AI-powered video analysis, real-time alerting, and human-in-the-loop annotation for continuous learning. The architecture is built on microservices principles with Docker containerization, event-driven communication via Kafka, and modern web interfaces.

## ✨ Core Features

- **Real-time AI Video Analysis**: Computer vision models for object detection, person tracking, and behavior analysis
- **Intelligent Alerting**: Context-aware notifications with customizable rules and thresholds
- **Human-in-the-Loop Learning**: Annotation frontend for labeling hard examples to improve model accuracy
- **Multi-Modal Interfaces**: Web dashboard, mobile app, and voice interface for diverse user experiences
- **GDPR-Compliant**: Privacy-focused design with data retention policies and audit trails
- **Scalable Architecture**: Microservices with horizontal scaling capabilities
- **Edge Computing**: Distributed processing for low-latency applications

## 🚀 Quick Start

### Prerequisites

- **Docker** (v20.10+) and Docker Compose (v2.0+)
- **Python** 3.8+ (for local development)
- **Node.js** 16+ (for frontend development)
- **Kafka** (handled by Docker Compose)
- **PostgreSQL** (handled by Docker Compose)

### Installation

1. **Clone the repository**
   ```bash
   git clone <repository-url>
   cd surveillance-system
   ```

2. **Set up environment variables**
   ```bash
   cp .env.example .env
   # Edit .env with your configuration
   ```

3. **Start the system**
   ```bash
   docker-compose up -d
   ```

4. **Access the applications**
   - **Annotation UI**: http://localhost:8011
   - **Web Dashboard**: http://localhost:3000
   - **API Gateway**: http://localhost:8000
   - **Mobile App**: See `mobile-app/README.md`

### Environment Configuration

Create a `.env` file in the root directory with the following variables:

```bash
# Database Configuration
POSTGRES_DB=events_db
POSTGRES_USER=surveillance_user
POSTGRES_PASSWORD=surveillance_pass_5487

# Kafka Configuration
KAFKA_BOOTSTRAP_SERVERS=kafka:9092

# JWT Authentication
JWT_SECRET_KEY=your_jwt_secret_key_here

# AWS Configuration (for audit logs)
AWS_S3_BUCKET=surveillance-audit-logs
AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=your_access_key
AWS_SECRET_ACCESS_KEY=your_secret_key

# Service-specific configurations
ANNOTATION_PAGE_SIZE=50
RATE_LIMIT_DEFAULT=100/minute
```

## 🏗️ Architecture

The system follows a microservices architecture with the following components:

### Core Services

| Service | Port | Description |
|---------|------|-------------|
| **API Gateway** | 8000 | Central entry point and request routing |
| **VMS Service** | 8001 | Video Management System - camera feeds and recordings |
| **Agent Orchestrator** | 8002 | AI agent coordination and load balancing |
| **Dashboard Service** | 8003 | Real-time analytics and monitoring |
| **Ingest Service** | 8004 | Video stream ingestion and preprocessing |
| **Rule Builder** | 8005 | Custom alert rule configuration |
| **Notifier** | 8006 | Multi-channel notification delivery |
| **Retention Service** | 8007 | Data lifecycle and compliance management |
| **RAG Service** | 8008 | Retrieval-Augmented Generation for insights |
| **Prompt Service** | 8009 | AI prompt engineering and optimization |
| **RuleGen Service** | 8010 | Automated rule generation from patterns |
| **Annotation Frontend** | 8011 | Human annotation interface for hard examples |
| **Training Service** | 8012 | Model training and continuous learning |

### Supporting Infrastructure

- **PostgreSQL**: Primary database for structured data
- **Redis**: Caching and session management
- **Kafka**: Event streaming and inter-service communication
- **Weaviate**: Vector database for semantic search
- **Prometheus**: Metrics collection and monitoring

### Frontend Applications

- **Website**: Marketing site and user portal (Next.js)
- **Mobile App**: iOS/Android surveillance management (React Native)
- **Voice Interface**: Voice-controlled system interaction

## 📖 Documentation

- **[Architecture Guide](docs/architecture.md)**: Detailed system design and component interactions
- **[API Reference](docs/api.md)**: Complete API documentation with examples
- **[Annotation User Guide](docs/annotation_user_guide.md)**: Step-by-step annotation workflow
- **[Deployment Guide](docs/deployment.md)**: Production deployment instructions

## 🧪 Testing

Run the full test suite:

```bash
# Unit tests
pytest

# Integration tests
pytest integration_tests/

# End-to-end tests
pytest tests/e2e/

# Mobile app tests
cd mobile-app && npm test

# Website tests
cd website && npm test
```

## 📦 Project Structure

```
surveillance-system/
├── agent_orchestrator/        # AI agent coordination service
├── annotation_frontend/       # Human annotation interface
├── ai_dashboard_service/      # Real-time analytics dashboard
├── api_gateway/              # Central API gateway
├── ingest_service/           # Video stream processing
├── mobile-app/               # React Native mobile application
├── notifier/                 # Multi-channel notifications
├── rag_service/              # AI-powered insights
├── retention_service/        # Data lifecycle management
├── rule_builder_service/     # Custom alert rules
├── training_service/         # ML model training
├── vms_service/              # Video management system
├── website/                  # Marketing website
├── websocket_service/        # Real-time communication
├── shared/                   # Common utilities and configurations
├── docker-compose.yml        # Service orchestration
├── requirements.txt          # Python dependencies
└── README.md                # This file
```

## 🔐 Security

- **Authentication**: JWT-based authentication with role-based access control
- **Authorization**: Fine-grained permissions with OAuth2 scopes
- **Data Encryption**: TLS/SSL for data in transit, AES-256 for data at rest
- **Audit Logging**: Comprehensive audit trails stored in AWS S3
- **Rate Limiting**: Protection against abuse and DDoS attacks
- **GDPR Compliance**: Data retention policies and right-to-be-forgotten

## 🌐 API Usage

The system exposes RESTful APIs for all major functions:

```bash
# Get pending annotation examples
curl -H "Authorization: Bearer $TOKEN" \
     http://localhost:8011/api/v1/examples

# Submit hard example labels
curl -X POST -H "Authorization: Bearer $TOKEN" \
     -H "Content-Type: application/json" \
     -d '{"corrected_detections": [...]}' \
     http://localhost:8011/api/v1/examples/{id}/label

# Get system health
curl http://localhost:8000/health
```

See the [API Documentation](docs/api.md) for complete endpoint details.

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## 📄 License

This project is proprietary and confidential. All rights reserved.

## 🆘 Support

For questions, issues, or support:

- **Documentation**: Check the `docs/` directory
- **Issues**: Create a GitHub issue
- **Email**: support@surveillance-system.com

## 🚀 Roadmap

- [ ] Enhanced edge computing capabilities
- [ ] Advanced analytics and predictive modeling
- [ ] Multi-tenant architecture
- [ ] Kubernetes deployment manifests
- [ ] Advanced voice interface features
- [ ] Mobile app offline capabilities

All API endpoints now use the `/api/v1/` prefix for version 1:

#### REST API Endpoints
```bash
# Alerts Management
GET  /api/v1/alerts           # List alerts
POST /api/v1/alerts           # Create alert
GET  /api/v1/alerts/{id}      # Get specific alert

# Contact/Support
POST /api/v1/contact          # Submit contact form

# Notifications
POST /api/v1/notify           # Send notification
GET  /api/v1/notifications    # Get notification history

# Health & Status
GET  /api/v1/health           # Service health check
GET  /api/v1/status           # System status
```

#### WebSocket Endpoints
```bash
# Real-time Events
ws://localhost:8080/ws/v1/events/{client_id}    # Event stream
ws://localhost:8080/ws/v1/alerts/{client_id}    # Alert stream
```

### Backwards Compatibility

The system maintains full backwards compatibility through automatic HTTP 301 redirects:

```bash
# Old unversioned endpoints automatically redirect to v1
curl -i http://localhost:8080/api/alerts
# HTTP/1.1 301 Moved Permanently
# Location: /api/v1/alerts
# X-API-Version-Redirect: v1

# Query parameters are preserved in redirects
curl -i http://localhost:8080/api/alerts?status=active
# HTTP/1.1 301 Moved Permanently  
# Location: /api/v1/alerts?status=active
```

### WebSocket Deprecation Notices

Legacy WebSocket endpoints send deprecation notices before graceful termination:

```javascript
// Legacy WebSocket connection
const ws = new WebSocket('ws://localhost:8080/ws/events/client123');

ws.onmessage = (event) => {
  const data = JSON.parse(event.data);
  if (data.type === 'deprecation_notice') {
    console.warn('WebSocket endpoint deprecated:', data.message);
    // Migrate to: ws://localhost:8080/ws/v1/events/client123
  }
};

// WebSocket closes with custom code 3000 after notice
ws.onclose = (event) => {
  if (event.code === 3000) {
    console.log('Deprecated endpoint closed:', event.reason);
  }
};
```

### Client Migration Guide

#### 1. Update Base URLs
```diff
# REST API Calls
- fetch('/api/alerts')
+ fetch('/api/v1/alerts')

- fetch('/api/contact', { method: 'POST', ... })
+ fetch('/api/v1/contact', { method: 'POST', ... })
```

#### 2. Update WebSocket Connections  
```diff
# WebSocket Connections
- new WebSocket('ws://localhost:8080/ws/events/client123')
+ new WebSocket('ws://localhost:8080/ws/v1/events/client123')

- new WebSocket('ws://localhost:8080/ws/alerts/client123')  
+ new WebSocket('ws://localhost:8080/ws/v1/alerts/client123')
```

#### 3. OpenAPI Documentation
All services now expose versioned OpenAPI documentation:
```bash
# Service OpenAPI specs are available at versioned endpoints
GET /api/v1/docs          # Interactive API documentation  
GET /api/v1/openapi.json  # OpenAPI specification
```

### Benefits

- **🔄 Zero-downtime migration**: Existing clients continue working
- **📋 Clear migration path**: All endpoints clearly documented
- **🚀 Future-proof**: Ready for v2, v3, etc.
- **🔍 Easy debugging**: Version headers help identify client versions
- **📈 Gradual adoption**: Teams can migrate at their own pace

## Audit Logging

The surveillance system implements immutable WORM (Write Once, Read Many) audit logging to ensure compliance and tamper-proof audit trails. All structured audit logs are automatically stored in AWS S3 with Object Lock enabled.

### Overview

All application logs at INFO level and above are automatically:
- ✅ Written to console (stdout) for immediate visibility
- ✅ Uploaded to AWS S3 with Object Lock for immutable storage
- ✅ Stored with 7-year retention for compliance requirements
- ✅ Organized with date-based hierarchy for easy retrieval

### Required Environment Variables

The following environment variables must be configured for WORM audit logging:

| Variable | Purpose | Example | Required |
|----------|---------|---------|----------|
| `AWS_S3_BUCKET` | S3 bucket name for audit logs | `surveillance-audit-logs` | ✅ Yes |
| `AWS_REGION` | AWS region of the S3 bucket | `us-east-1` | ✅ Yes |
| `AWS_S3_PREFIX` | S3 prefix for organizing logs | `audit-logs` | ❌ Optional |
| `AWS_ACCESS_KEY_ID` | AWS access key (prefer IAM roles) | `AKIA...` | ❌ Optional |
| `AWS_SECRET_ACCESS_KEY` | AWS secret key (prefer IAM roles) | `xxx...` | ❌ Optional |

### Prerequisites

#### 1. S3 Bucket Configuration

The S3 bucket **MUST** have Object Lock enabled in **Governance mode**:

```bash
# Create bucket with Object Lock enabled
aws s3api create-bucket \
  --bucket surveillance-audit-logs \
  --region us-east-1 \
  --object-lock-enabled-for-bucket

# Configure default Object Lock retention (7 years)
aws s3api put-object-lock-configuration \
  --bucket surveillance-audit-logs \
  --object-lock-configuration '{
    "ObjectLockEnabled": "Enabled",
    "Rule": {
      "DefaultRetention": {
        "Mode": "GOVERNANCE",
        "Years": 7
      }
    }
  }'
```

#### 2. IAM Permissions

The application requires the following S3 permissions:

```json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention"
      ],
      "Resource": "arn:aws:s3:::surveillance-audit-logs/*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "s3:ListBucket",
        "s3:GetBucketObjectLockConfiguration"
      ],
      "Resource": "arn:aws:s3:::surveillance-audit-logs"
    }
  ]
}
```

### Log Format

Audit logs are stored in structured JSON format with the following schema:

```json
{
  "timestamp": "2025-06-12T13:30:33.025676Z",
  "level": "INFO",
  "message": "User login successful",
  "service_name": "api_gateway",
  "request_id": "req-12345-abcde",
  "user_id": "user@example.com",
  "action": "user_login",
  "ip_address": "192.168.1.100",
  "user_agent": "Mozilla/5.0...",
  "custom_context": "additional_fields"
}
```

### S3 Storage Structure

Logs are organized in S3 with the following hierarchy:

```
s3://surveillance-audit-logs/
└── audit-logs/                    # AWS_S3_PREFIX
    └── 2025/                      # Year
        └── 06/                    # Month
            └── 12/                # Day
                ├── req-abc-uuid1.json
                ├── req-def-uuid2.json
                └── req-ghi-uuid3.json
```

### Usage Example

Enable WORM audit logging in your service:

```python
from shared.logging_config import configure_logging

# Configure logging with WORM enabled
logger = configure_logging(
    service_name='your_service',
    log_level='INFO',
    enable_worm=True  # Enables WORM audit logging
)

# Log audit events with context
logger.info(
    "User performed sensitive action",
    extra={
        'service_name': 'auth_service',
        'request_id': 'req-12345-abcde',
        'user_id': 'user@example.com',
        'action': 'password_change',
        'ip_address': '192.168.1.100',
        'success': True
    }
)
```

### Error Handling

The WORM logging system includes robust error handling:

- **Network Outages**: Logs are queued locally and retried when connectivity returns
- **S3 Failures**: Failed uploads are retried with exponential backoff
- **Object Lock Unavailable**: System falls back to standard S3 upload with metadata flag
- **Service Continuity**: Application continues running even if audit logging fails

### Monitoring

Monitor WORM audit logging through:

- **Console Logs**: WORM handler status messages appear in service logs
- **Local Error Logs**: Failed uploads are logged locally for debugging
- **CloudWatch Metrics**: S3 upload metrics and error rates (if configured)
- **Health Checks**: Services report WORM handler status in health endpoints

### Compliance Benefits

- **🔒 Tamper-Proof**: Object Lock prevents deletion or modification
- **📅 Long-term Retention**: 7-year retention meets regulatory requirements
- **🔍 Audit Trail**: Complete forensic audit trail for security events
- **📋 Structured Format**: Consistent JSON schema for automated analysis
- **⚡ Real-time**: Immediate upload ensures minimal data loss
- **🛡️ High Availability**: AWS S3 provides 99.999999999% durability

## Compliance APIs

The surveillance system provides secure, auditable APIs for GDPR/KVKK compliance, allowing data subjects to request deletion of their personal data (face recognition data) in accordance with privacy regulations.

### Data Subject Request Service

The Data Subject Request Service provides a secure endpoint for handling "right to be forgotten" requests by face hash ID, automating the purge across the database and storage systems.

#### Authentication & Authorization

- **JWT Authentication**: All requests must include a valid JWT token
- **Role-Based Access**: Requires `compliance_officer` role/scope
- **Audit Logging**: All deletion requests are logged via WORM audit system

#### API Endpoint

**POST** `/data-subject/delete`

Deletes all data associated with a face hash ID including:
- All events containing the face_hash_id in their privacy metadata
- All video segments associated with those events  
- All video files referenced by those segments (from S3 or local storage)

##### Request Format
```json
{
  "face_hash_id": "a1b2c3d4e5f6789012345678901234567890123456789012345678901234abcd"
}
```

##### Response Format
```json
{
  "status": "deleted",
  "events": 5,
  "files": 3,
  "face_hash_id": "a1b2c3d4e5f6789012345678901234567890123456789012345678901234abcd",
  "timestamp": "2025-06-12T10:30:45Z"
}
```

##### Status Codes
- **200 OK**: Successful deletion (includes cases where no data was found)
- **422 Unprocessable Entity**: Invalid face_hash_id format
- **403 Forbidden**: Insufficient permissions (missing compliance_officer role)
- **500 Internal Server Error**: Database or storage errors

#### Usage Example

```bash
# Delete all data for a specific face hash
curl -X POST "http://localhost:8011/data-subject/delete" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer YOUR_JWT_TOKEN" \
  -d '{
    "face_hash_id": "a1b2c3d4e5f6789012345678901234567890123456789012345678901234abcd"
  }'
```

#### Face Hash ID Format

- **Length**: Exactly 64 characters
- **Format**: Hexadecimal string (0-9, a-f, A-F)
- **Example**: `a1b2c3d4e5f6789012345678901234567890123456789012345678901234abcd`
- **Validation**: Regex pattern `^[a-fA-F0-9]{64}$`

#### Required JWT Scope

The JWT token must include the `compliance_officer` scope:

```json
{
  "sub": "compliance@surveillance.com",
  "scopes": ["compliance_officer"],
  "iat": 1718195445,
  "exp": 1718199045
}
```

#### Service Configuration

Configure the service using environment variables:

| Variable | Purpose | Example | Required |
|----------|---------|---------|----------|
| `DATABASE_URL` | PostgreSQL connection string | `postgresql://user:pass@host:5432/db` | ✅ Yes |
| `STORAGE_PATH` | Storage location (S3 or local) | `s3://bucket-name` or `/data/clips` | ✅ Yes |
| `AWS_REGION` | AWS region for S3 operations | `us-east-1` | ❌ S3 only |
| `AWS_ACCESS_KEY_ID` | AWS access key | `AKIA...` | ❌ S3 only |
| `AWS_SECRET_ACCESS_KEY` | AWS secret key | `xxx...` | ❌ S3 only |

#### Operational Features

- **🔄 Transactional**: All operations within a database transaction - rollback on any failure
- **📁 Multi-Storage**: Supports both S3 and local filesystem storage
- **🔍 Audit Trail**: Complete WORM audit logging for compliance
- **⚡ Efficient**: Batch operations for optimal performance
- **🛡️ Secure**: Role-based access control with JWT authentication
- **📋 Structured**: JSON request/response format with validation

#### Health Check

**GET** `/health`

Returns service health status:

```json
{
  "status": "healthy",
  "service": "data_subject_service",
  "timestamp": "2025-06-12T10:30:45Z"
}
```

#### Docker Deployment

The service runs on port 8011 and is included in the main docker-compose.yml:

```bash
# Start the compliance service
docker-compose up data_subject_service

# Check service health
curl http://localhost:8011/health
```
