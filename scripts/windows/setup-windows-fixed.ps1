# Surveillance System - Windows Setup Script
# This script installs and configures the surveillance system on Windows

param(
    [switch]$SkipPrerequisites,
    [switch]$DevMode,
    [switch]$Quick,
    [switch]$BuildOnly,
    [string]$Environment = "development"
)

# Color output functions
function Write-ColorOutput($ForegroundColor) {
    if ($Host.UI.RawUI.ForegroundColor) {
        $fc = $Host.UI.RawUI.ForegroundColor
        $Host.UI.RawUI.ForegroundColor = $ForegroundColor
        if ($args) {
            Write-Output $args
        } else {
            $input | Write-Output
        }
        $Host.UI.RawUI.ForegroundColor = $fc
    } else {
        if ($args) {
            Write-Output $args
        } else {
            $input | Write-Output
        }
    }
}

function Write-Success { Write-ColorOutput Green $args }
function Write-Warning { Write-ColorOutput Yellow $args }
function Write-Error { Write-ColorOutput Red $args }
function Write-Info { Write-ColorOutput Cyan $args }

# Header
Write-Host "Surveillance System - Windows Setup Script" -ForegroundColor Magenta
Write-Host "===========================================" -ForegroundColor Magenta
Write-Host "Environment: $Environment" -ForegroundColor Magenta
Write-Host ""

# Error handling
$ErrorActionPreference = "Stop"
trap {
    Write-Error "Error occurred: $_"
    Read-Host "Press Enter to continue"
    exit 1
}

# Check prerequisites
function Test-Prerequisites {
    if ($SkipPrerequisites) {
        Write-Warning "Skipping prerequisite checks..."
        return
    }

    Write-Info "Checking prerequisites..."
    
    # Docker check
    try {
        $dockerVersion = docker --version
        Write-Success "Docker found: $dockerVersion"
    }
    catch {
        Write-Error "Docker not found. Please install Docker Desktop: https://www.docker.com/products/docker-desktop"
        exit 1
    }

    # Docker Compose check
    try {
        $composeVersion = docker-compose --version
        Write-Success "Docker Compose found: $composeVersion"
    }
    catch {
        Write-Error "Docker Compose not found. It should come with Docker Desktop."
        exit 1
    }

    # Check if Docker is running
    try {
        docker ps | Out-Null
        Write-Success "Docker service is running"
    }
    catch {
        Write-Error "Docker service is not running. Please start Docker Desktop."
        exit 1
    }
}

# Set up environment variables
function Set-EnvironmentVariables {
    Write-Info "Setting up environment variables..."
    
    # Create .env file
    $envContent = @"
# Surveillance System Environment Configuration
# Generated by setup script on $(Get-Date)

# Environment
ENVIRONMENT=$Environment

# Database Configuration
POSTGRES_DB=events_db
POSTGRES_USER=surveillance_user
POSTGRES_PASSWORD=surveillance_pass_$(Get-Random -Minimum 1000 -Maximum 9999)
DATABASE_URL=postgresql://surveillance_user:surveillance_pass_$(Get-Random -Minimum 1000 -Maximum 9999)@postgres:5432/events_db

# Redis Configuration
REDIS_URL=redis://redis:6379/0

# Kafka Configuration
KAFKA_BOOTSTRAP_SERVERS=kafka:9092
KAFKA_TOPIC_PREFIX=surveillance

# API Configuration
API_HOST=0.0.0.0
API_PORT=8000
JWT_SECRET_KEY=surveillance_jwt_secret_$(Get-Random -Minimum 10000 -Maximum 99999)

# AI Service Configuration
OPENAI_API_KEY=your_openai_api_key_here
WEAVIATE_URL=http://weaviate:8080

# Monitoring
PROMETHEUS_PORT=9090
GRAFANA_PORT=3000
GRAFANA_ADMIN_PASSWORD=admin123

# Video Storage
VIDEO_STORAGE_PATH=./data/clips
MAX_CLIP_SIZE_MB=100

# MQTT Configuration
MQTT_BROKER_HOST=localhost
MQTT_BROKER_PORT=1883
MQTT_USERNAME=surveillance
MQTT_PASSWORD=mqtt_pass_$(Get-Random -Minimum 1000 -Maximum 9999)

# Development Settings
DEBUG=true
LOG_LEVEL=INFO
"@

    $envContent | Out-File -FilePath ".env" -Encoding UTF8
    Write-Success ".env file created successfully"
}

# Create required directories
function New-RequiredDirectories {
    Write-Info "Creating required directories..."
    
    $directories = @(
        "data",
        "data/clips",
        "data/postgres",
        "data/redis",
        "logs",
        "certs",
        "monitoring/grafana/data",
        "monitoring/prometheus/data"
    )
    
    foreach ($dir in $directories) {
        if (!(Test-Path $dir)) {
            New-Item -ItemType Directory -Path $dir -Force | Out-Null
            Write-Success "Directory created: $dir"
        }
    }
}

# Create Docker volumes
function New-DockerVolumes {
    Write-Info "Creating Docker volumes..."
    
    $volumes = @(
        "surveillance_postgres_data",
        "surveillance_redis_data",
        "surveillance_kafka_data",
        "surveillance_weaviate_data",
        "surveillance_grafana_data",
        "surveillance_prometheus_data"
    )
    
    foreach ($volume in $volumes) {
        try {
            docker volume create $volume | Out-Null
            Write-Success "Volume created: $volume"
        }
        catch {
            Write-Warning "Volume already exists or could not be created: $volume"
        }
    }
}

# Create Docker networks
function New-DockerNetworks {
    Write-Info "Creating Docker networks..."
    
    $networks = @(
        "surveillance_network",
        "surveillance_monitoring"
    )
    
    foreach ($network in $networks) {
        try {
            docker network create $network | Out-Null
            Write-Success "Network created: $network"
        }
        catch {
            Write-Warning "Network already exists or could not be created: $network"
        }
    }
}

# Start services
function Start-Services {
    Write-Info "Starting services..."
    
    if ($Quick) {
        Write-Info "Quick mode - starting basic services only"
        docker-compose up -d postgres redis kafka zookeeper api_gateway
    }
    elseif ($DevMode) {
        Write-Info "Development mode - starting with monitoring services"
        docker-compose --profile development up -d
    }
    else {
        Write-Info "Starting all services..."
        docker-compose up -d
    }
    
    Write-Success "Services started successfully"
}

# Health check
function Test-ServiceHealth {
    Write-Info "Checking service health..."
    
    Start-Sleep -Seconds 10
    
    $services = @(
        @{Name="API Gateway"; Url="http://localhost:8000/health"},
        @{Name="Grafana"; Url="http://localhost:3000/api/health"}
    )
    
    foreach ($service in $services) {
        if ($service.Url) {
            try {
                $response = Invoke-WebRequest -Uri $service.Url -TimeoutSec 5
                if ($response.StatusCode -eq 200) {
                    Write-Success "$($service.Name) is healthy"
                }
            }
            catch {
                Write-Warning "$($service.Name) is not ready yet"
            }
        }
    }
}

# Create helper scripts
function New-HelperScripts {
    Write-Info "Creating helper scripts..."
    
    # Start script
    $startScript = @"
# Start Surveillance System
Write-Host "Starting Surveillance System..." -ForegroundColor Green
docker-compose up -d
Write-Host "System started!" -ForegroundColor Green
Write-Host "Access URLs:" -ForegroundColor Cyan
Write-Host "• API Gateway: http://localhost:8000"
Write-Host "• API Documentation: http://localhost:8000/docs"
Write-Host "• Grafana: http://localhost:3000 (admin/admin123)"
"@
    $startScript | Out-File -FilePath "start.ps1" -Encoding UTF8
    
    # Stop script
    $stopScript = @"
# Stop Surveillance System
Write-Host "Stopping Surveillance System..." -ForegroundColor Yellow
docker-compose down
Write-Host "System stopped!" -ForegroundColor Green
"@
    $stopScript | Out-File -FilePath "stop.ps1" -Encoding UTF8
    
    Write-Success "Helper scripts created"
}

# Main installation function
function Install-SurveillanceSystem {
    Write-Success "Starting installation..."
    
    # Check prerequisites
    Test-Prerequisites
    
    # Set up environment
    Set-EnvironmentVariables
    
    # Create directories
    New-RequiredDirectories
    
    # Create Docker resources
    New-DockerVolumes
    New-DockerNetworks
    
    if (!$BuildOnly) {
        # Start services
        Start-Services
        
        # Health check
        Test-ServiceHealth
        
        # Create helper scripts
        New-HelperScripts
    }
    
    Write-Host ""
    Write-Success "Installation completed!"
    Write-Success "======================"
    Write-Host ""
    Write-Info "Service URLs:"
    Write-Host "• API Gateway: http://localhost:8000"
    Write-Host "• API Documentation: http://localhost:8000/docs"
    Write-Host "• Grafana Monitoring: http://localhost:3000 (admin/admin123)"
    Write-Host "• Prometheus: http://localhost:9090"
    Write-Host ""
    Write-Info "Useful commands:"
    Write-Host "• Stop services: docker-compose down"
    Write-Host "• Restart services: docker-compose restart"
    Write-Host "• View logs: docker-compose logs -f"
    Write-Host "• Start system: .\start.ps1"
    Write-Host "• Stop system: .\stop.ps1"
    Write-Host ""
    Write-Info "For more information, check the README.md file."
}

# Run main installation
Install-SurveillanceSystem

Write-Success "Script completed!"
